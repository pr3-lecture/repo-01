;einfaches length
(defun my-length (list)  
	(do ((n 0 (+ n 2)) 
			(fast list (cddr fast))    
			(slow list (cdr slow))
		)    
		(nil)
		(when (endp fast) (return n))
		(when (endp (cdr fast)) (return (+ n 1)))
		(when (and (eq fast slow) (> n 0)) (return nil))
	)
)

;tiefe length
(defun my-lengthR (list)

???

)



;einfaches reverse
(defun my-reverse (list)
    (cond
        ((null list) '())
        (T (append (my-reverse (cdr list)) (list (car list))))
	)
) 


;tiefes reverse
(defun my-reverseR (list)

???

)
		
		
		
		
		
		
